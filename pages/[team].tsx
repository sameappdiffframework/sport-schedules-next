import { DateTime } from 'luxon'
import type { GetStaticPaths, GetStaticProps, NextPage } from 'next'
import Head from 'next/head'
import type { ParsedUrlQuery } from 'node:querystring'
import React from 'react'
import Header from '../comps/header'
import SingleDaySchedule from '../comps/single-day-schedule'
import type { Game, MetaInfo, Team, Teams, TeamSchedules } from '../lib/model'
import { isDefined } from '../lib/utils'

const BUILD_TIME_FORMAT_OPTIONS: Intl.DateTimeFormatOptions = {
    weekday: 'short', day: 'numeric', month: 'short',
    hour: 'numeric', minute: 'numeric', timeZoneName: 'short'
}

const Home: NextPage<PageProps> = ({ schedule, team, _meta }) => {
    const buildTime = DateTime.fromISO(_meta.buildDate).setZone('America/Chicago');
    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <Header />
            <main>
                <h2>{team.nickname} schedule</h2>
                <SingleDaySchedule games={schedule}/>
            </main>
            <footer>
                <p><small>The data powering this site was gathered at {buildTime.toLocaleString(BUILD_TIME_FORMAT_OPTIONS)}.</small></p>
            </footer>
        </>
    )
}

interface TeamPath extends ParsedUrlQuery {
    team: string;
}

type PageProps = { team: Team, schedule: Game[] } & MetaInfo;

export const getStaticPaths: GetStaticPaths<TeamPath> = async () => {
    const teamAbbreviations = await fetch('https://sport-schedules.netlify.app/basketball/teamSchedules.json')
        .then(response => response.json() as Promise<TeamSchedules>)
        .then(schedules => Object.keys(schedules.teamSchedules));
    return {
        paths: teamAbbreviations.map(team => ({ params: { team: team.toLowerCase() } })),
        fallback: false
    };
}

export const getStaticProps: GetStaticProps<PageProps, TeamPath> = async (context) => {
    const teamAbbreviation = context.params?.team;
    if (isDefined(teamAbbreviation)) {
        const [schedule, meta]: [Game[], MetaInfo] = await fetch('https://sport-schedules.netlify.app/basketball/teamSchedules.json')
            .then(response => response.json() as Promise<TeamSchedules>)
            .then(schedule => [schedule.teamSchedules[teamAbbreviation], { _meta: schedule._meta }])
        const team: Team | undefined = await fetch('https://sport-schedules.netlify.app/basketball/teams.json')
            .then(response => response.json() as Promise<Teams>)
            .then(schedule => schedule.teams.find(team => team.abbreviation.toLowerCase() === teamAbbreviation))
        if (!isDefined(team)) {
            throw new Error(`no team found for ${teamAbbreviation}`)
        } else if (!isDefined(schedule)) {
            throw new Error(`no games found for ${teamAbbreviation}`)
        } else {
            return { props: Object.assign({ team: team, schedule: schedule }, meta) }
        }
    }
    else {
        throw new Error('no team defined')
    }
}

export default Home
